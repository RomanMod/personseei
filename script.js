// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.ready();
tg.expand();

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
const playerName = document.getElementById('player-name');
playerName.textContent = `–ì—Ä–∞–≤–µ—Ü—å: ${tg.initDataUnsafe.user ? tg.initDataUnsafe.user.first_name : '–ê–Ω–æ–Ω—ñ–º'}`;

// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const themeToggle = document.getElementById('theme-toggle');
const languageSelect = document.getElementById('language-select');
const modeSelect = document.getElementById('mode-select');
const personImage = document.getElementById('person-image');
const loadingProgress = document.getElementById('loading-progress');
const nextPhotoButton = document.getElementById('next-photo');
const hardModeQuestions = document.getElementById('hard-mode-questions');
const easyModeQuestions = document.getElementById('easy-mode-questions');
const checkAnswerButton = document.getElementById('check-answer');
const resultDiv = document.getElementById('result');
const personInfo = document.getElementById('person-info');
const wikiLink = document.getElementById('wiki-link');
const correctAnswersSpan = document.getElementById('correct-answers');
const totalQuestionsSpan = document.getElementById('total-questions');

// –ü–µ—Ä–µ–≤–æ–¥—ã
const translations = {
    uk: {
        title: '–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞: –•—Ç–æ —Ü–µ?',
        alive: '–ñ–∏–≤–∏–π',
        dead: '–ú–µ—Ä—Ç–≤–∏–π',
        male: '–ß–æ–ª–æ–≤—ñ–∫',
        female: '–ñ—ñ–Ω–∫–∞',
        check: '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏',
        stats: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        correct: '–ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
        total: '–í—Å—å–æ–≥–æ –ø–∏—Ç–∞–Ω—å',
        loading: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è',
        next: '–ù–∞—Å—Ç—É–ø–Ω–µ —Ñ–æ—Ç–æ'
    },
    ru: {
        title: '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –ö—Ç–æ —ç—Ç–æ?',
        alive: '–ñ–∏–≤',
        dead: '–ú–µ—Ä—Ç–≤',
        male: '–ú—É–∂—á–∏–Ω–∞',
        female: '–ñ–µ–Ω—â–∏–Ω–∞',
        check: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
        stats: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        correct: '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã',
        total: '–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤',
        loading: '–ó–∞–≥—Ä—É–∑–∫–∞',
        next: '–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ'
    },
    en: {
        title: 'Quiz: Who is it?',
        alive: 'Alive',
        dead: 'Dead',
        male: 'Male',
        female: 'Female',
        check: 'Check',
        stats: 'Statistics',
        correct: 'Correct answers',
        total: 'Total questions',
        loading: 'Loading',
        next: 'Next photo'
    },
    alien: {
        title: 'üëæ –ö–≤—ñ–∑: –•—Ç–æ —Ü–µ? üëæ',
        alive: 'üü¢ –ñ–∏–≤–∏–π',
        dead: 'üíÄ –ú–µ—Ä—Ç–≤–∏–π',
        male: 'üë® –ß–æ–ª–æ–≤—ñ–∫',
        female: 'üë© –ñ—ñ–Ω–∫–∞',
        check: 'üõ∏ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏',
        stats: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        correct: '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
        total: 'üî¢ –í—Å—å–æ–≥–æ –ø–∏—Ç–∞–Ω—å',
        loading: '‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è',
        next: 'üöÄ –ù–∞—Å—Ç—É–ø–Ω–µ —Ñ–æ—Ç–æ'
    }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let currentPerson = null;
let correctAnswers = 0;
let totalQuestions = 0;
let currentMode = 'easy';
let currentLanguage = 'uk';
let isDarkTheme = true;

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
themeToggle.addEventListener('click', () => {
    isDarkTheme = !isDarkTheme;
    document.body.classList.toggle('theme-light', !isDarkTheme);
    themeToggle.textContent = isDarkTheme ? translations[currentLanguage].night || '–ù—ñ—á' : translations[currentLanguage].day || '–î–µ–Ω—å';
    gtag('event', 'theme_change', { theme: isDarkTheme ? 'dark' : 'light' });
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
languageSelect.addEventListener('change', () => {
    currentLanguage = languageSelect.value;
    updateUIText();
    gtag('event', 'language_change', { language: currentLanguage });
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
modeSelect.addEventListener('change', () => {
    currentMode = modeSelect.value;
    updateMode();
    loadNewPerson();
    gtag('event', 'mode_change', { mode: currentMode });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUIText() {
    const t = translations[currentLanguage];
    document.querySelector('h1').textContent = t.title;
    document.querySelectorAll('.status[data-status="alive"]').forEach(btn => btn.textContent = t.alive);
    document.querySelectorAll('.status[data-status="dead"]').forEach(btn => btn.textContent = t.dead);
    document.querySelectorAll('.gender[data-gender="male"]').forEach(btn => btn.textContent = t.male);
    document.querySelectorAll('.gender[data-gender="female"]').forEach(btn => btn.textContent = t.female);
    checkAnswerButton.textContent = t.check;
    document.querySelector('.stats h3').textContent = t.stats;
    document.querySelector('.stats p:nth-child(2)').childNodes[0].textContent = `${t.correct}: `;
    document.querySelector('.stats p:nth-child(3)').childNodes[0].textContent = `${t.total}: `;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
function updateMode() {
    hardModeQuestions.style.display = currentMode === 'hard' ? 'block' : 'none';
    easyModeQuestions.style.display = currentMode === 'easy' ? 'block' : 'none';
    personImage.style.display = currentMode === 'easy' ? 'block' : 'none';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
async function loadNewPerson() {
    resetUI();
    loadingProgress.style.display = 'block';
    let progress = 0;
    const progressInterval = setInterval(() => {
        progress += 10;
        loadingProgress.textContent = `${translations[currentLanguage].loading}: ${progress}%`;
        if (progress >= 80) clearInterval(progressInterval);
    }, 200);

    try {
        const person = await fetchRandomPerson();
        if (!person) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞');
        currentPerson = person;
        personImage.src = person.image;
        personImage.style.display = currentMode === 'easy' ? 'block' : 'none';
        loadingProgress.textContent = `${translations[currentLanguage].loading}: 100%`;
        setTimeout(() => loadingProgress.style.display = 'none', 500);
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫:', person); // –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        loadingProgress.textContent = '–ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.';
        setTimeout(loadNewPerson, 2000);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ Wikipedia API
async function fetchRandomPerson() {
    const wikiLang = currentLanguage === 'uk' ? 'uk' : currentLanguage === 'ru' ? 'ru' : 'en';
    const endpoint = `https://${wikiLang}.wikipedia.org/w/api.php`;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–ª—è —Ä–µ–∂–∏–º–∞ "–ü—Ä–æ—Å—Ç–æ")
    const category = currentMode === 'hard' ? 'Category:Living_people' : 'Category:All_people';
    let queryParams = {
        action: 'query',
        list: 'categorymembers',
        cmtitle: category,
        cmlimit: 50,
        cmtype: 'page',
        format: 'json',
        origin: '*'
    };

    let response = await fetch(`${endpoint}?${new URLSearchParams(queryParams)}`);
    let data = await response.json();
    let pages = data.query.categorymembers;

    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let page;
    let attempts = 0;
    const maxAttempts = 5;

    while (attempts < maxAttempts) {
        page = pages[Math.floor(Math.random() * pages.length)];
        queryParams = {
            action: 'query',
            prop: 'pageimages|info|extracts',
            pageids: page.pageid,
            pithumbsize: 300,
            inprop: 'url',
            exintro: true,
            explaintext: true,
            format: 'json',
            origin: '*'
        };

        response = await fetch(`${endpoint}?${new URLSearchParams(queryParams)}`);
        data = await response.json();
        const pageData = data.query.pages[page.pageid];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (pageData.thumbnail && pageData.thumbnail.source) {
            const imageUrl = pageData.thumbnail.source;
            const isValidImage = await checkImage(imageUrl);
            if (isValidImage) {
                return {
                    name: pageData.title,
                    image: imageUrl,
                    wikiUrl: pageData.fullurl,
                    isAlive: pageData.extract.includes('died') ? 'dead' : 'alive',
                    gender: await guessGender(pageData.title, wikiLang) // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
                };
            }
        }
        attempts++;
    }
    return null;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function checkImage(url) {
    try {
        const response = await fetch(url, { method: 'HEAD' });
        const contentType = response.headers.get('content-type');
        return response.ok && contentType.startsWith('image/');
    } catch {
        return false;
    }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)
async function guessGender(name, lang) {
    const maleIndicators = lang === 'uk' ? ['–∏–π', '–æ–≤', '–∏—á'] : lang === 'ru' ? ['–æ–≤', '–∏–π', '–∏—á'] : ['son', 'man'];
    const femaleIndicators = lang === 'uk' ? ['–Ω–∞', '–∫–∞', '—ñ—è'] : lang === 'ru' ? ['–Ω–∞', '–∞—è', '–∏—è'] : ['woman', 'ia'];
    return maleIndicators.some(ind => name.toLowerCase().endsWith(ind)) ? 'male' :
           femaleIndicators.some(ind => name.toLowerCase().endsWith(ind)) ? 'female' : 'unknown';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
checkAnswerButton.addEventListener('click', () => {
    if (!currentPerson) return;

    let isCorrect = true;
    if (currentMode === 'hard') {
        const selectedStatus = document.querySelector('input[name="status"]:checked');
        const selectedGender = document.querySelector('.gender.correct');
        if (selectedStatus) {
            const statusCorrect = selectedStatus.value === currentPerson.isAlive;
            if (statusCorrect) selectedStatus.parentElement.style.backgroundColor = 'var(--highlight-color)';
            else isCorrect = false;
        } else isCorrect = false;

        if (selectedGender) {
            const genderCorrect = selectedGender.dataset.gender === currentPerson.gender;
            if (genderCorrect) selectedGender.classList.add('correct');
            else isCorrect = false;
        } else isCorrect = false;
    } else {
        const selectedStatus = document.querySelector('.status.correct');
        if (selectedStatus) {
            const statusCorrect = selectedStatus.dataset.status === currentPerson.isAlive;
            if (statusCorrect) selectedStatus.classList.add('correct');
            else isCorrect = false;
        } else isCorrect = false;
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    personImage.style.display = 'block';
    personInfo.textContent = currentPerson.name;
    wikiLink.href = currentPerson.wikiUrl;
    resultDiv.style.display = 'block';

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    totalQuestions++;
    if (isCorrect) correctAnswers++;
    correctAnswersSpan.textContent = correctAnswers;
    totalQuestionsSpan.textContent = totalQuestions;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GA4
    gtag('event', 'answer_submitted', {
        mode: currentMode,
        is_correct: isCorrect,
        person_name: currentPerson.name
    });

    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞:', { isCorrect, person: currentPerson }); // –õ–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
});

// –°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ
nextPhotoButton.addEventListener('click', loadNewPerson);

// –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function resetUI() {
    resultDiv.style.display = 'none';
    personInfo.textContent = '';
    wikiLink.href = '#';
    personImage.src = '';
    personImage.style.display = currentMode === 'easy' ? 'block' : 'none';
    document.querySelectorAll('.correct').forEach(el => el.classList.remove('correct'));
    document.querySelectorAll('input[name="status"]').forEach(input => input.checked = false);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø–æ–ª–∞
document.querySelectorAll('.status, .gender').forEach(button => {
    button.addEventListener('click', () => {
        const group = button.classList.contains('status') ? '.status' : '.gender';
        document.querySelectorAll(group).forEach(btn => btn.classList.remove('correct'));
        button.classList.add('correct');
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
updateUIText();
updateMode();
loadNewPerson();
